using System.IO;
using System.Numerics;
using System.Threading.Tasks;

namespace AsynchronousDebugging.Collatz
{
	// http://en.wikipedia.org/wiki/Collatz_conjecture#Statement_of_the_problem
	public static class CollatzConjecture
	{
		// This number will cause a StackOverflowException ONLY under the debugger in release mode:
		public static readonly string NumberThatWillCauseStackOverflowInReleaseUnderDebugger
		// This number will cause a StackOverflowException no matter what:
		public static readonly string NumberThatWillAlwaysCauseStackOverflow
		// This number should be safe to use:
		public static readonly string NumberThatIsLargeButSafe = "7893174893174893174931871";

		private static BigInteger GetNextValue(BigInteger value)
		{
			return value % 2 == 0 ?
				value / 2 : (3 * value) + 1;
		}

		public static int Collatz(BigInteger value)
		{
			var iterations = 1;

			return value > 1 ?
				iterations + CollatzConjecture.Collatz(
					CollatzConjecture.GetNextValue(value)) : 0;
		}

		public static void Collatz(BigInteger value, TextWriter writer)
		{
			writer.WriteLine(value.ToString());

			if (value > 1)
			{
				CollatzConjecture.Collatz(
					CollatzConjecture.GetNextValue(value), writer);
			}
		}

		public static async Task CollatzFromSyncToAsync(BigInteger value, TextWriter writer)
		{
			await Task.Run(async () =>
			{
				writer.WriteLine(value.ToString());

				if (value > 1)
				{
					await CollatzConjecture.CollatzFromSyncToAsync(
						CollatzConjecture.GetNextValue(value), writer);
				}
			});
		}

		public static async void CollatzReturningVoidAsync(BigInteger value, Stream stream)
		{
			var valueInBytes = value.ToByteArray();
			await stream.WriteAsync(valueInBytes, 0, valueInBytes.Length);

			if (value > 1)
			{
				CollatzConjecture.CollatzReturningVoidAsync(
					CollatzConjecture.GetNextValue(value), stream);
			}
		}

		public static async Task CollatzAsync(BigInteger value, TextWriter writer)
		{
			await writer.WriteLineAsync(value.ToString());

			if (value > 1)
			{
				await CollatzConjecture.CollatzAsync(
					CollatzConjecture.GetNextValue(value), writer);
			}
		}

		public static async Task CollatzAsync(BigInteger value, Stream stream)
		{
			var valueInBytes = value.ToByteArray();
			await stream.WriteAsync(valueInBytes, 0, valueInBytes.Length);

			if (value > 1)
			{
				await CollatzConjecture.CollatzAsync(
					CollatzConjecture.GetNextValue(value), stream);
			}
		}
	}
}
